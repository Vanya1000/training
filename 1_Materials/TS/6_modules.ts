/* 
! Access external libraries
  TypeScript предоставляет два способа организации кода: пространства имен и модули. Хотя оба они предоставляют способ категоризации связанного кода в осмысленном виде и помогают контролировать, какой код предоставляется 
  глобальному пространству имен приложений, между ними есть некоторые различия. В этом модуле содержатся сведения о модулях в TypeScript (которые в предыдущих версиях называются внешними модулями).
  Помимо модулей, можно импортировать другие внешние библиотеки, содержащие определения типов, которые можно использовать в коде.
  +Organize code with modules
    Модули предоставляют способ организации и классификации кода, позволяя группировать связанный код вместе. Кроме того, когда код находится внутри модуля, он извлекается из глобальной области в область модуля. 
    Это может помочь избежать конфликтов именования компонентов в глобальном пространстве имен.
    -!-Модули были реализованы в JavaScript начиная с ES6, поэтому они также поддерживаются TypeScript. До ES6 предыдущие версии TypeScript назывались "внешними модулями".
    Можно экспортировать любое объявление (например, переменную, функцию, класс, псевдоним типа или интерфейс), добавив ключевое слово export или импортировав его с помощью ключевого слова import. 
    Любой файл, содержащий import верхнего уровня или оператор export, считается модулем. 
    Оператор export явным образом делает компонент в одном модуле доступным для других модулей, а оператор import позволяет использовать этот компонент из другого модуля. 
    Модули являются декларативными; операторы import и export на уровне файлов описывают связи между ними.
  +Exercise - Export and import module components
    Давайте рассмотрим, как организовать объявления переменных, классов, интерфейсов и функций в несколько модулей, а затем использовать эти компоненты в коде.
    +Export a module component
      Чтобы экспортировать компонент модуля, используйте ключевое слово export.
      В этой части упражнения вам предстоит упорядочить связанные функции в отдельные модули, а затем экспортировать объявления функций.
        */
// Создайте новый файл с именем greetings_module.ts, а затем добавьте к нему следующую вызываемую функцию returnGreeting.
export function returnGreeting(greeting: string) { // Добавьте ключевое слово export перед именем функции, чтобы оно было доступно другим модулям.
  console.log(`The message from Greetings_module is ${greeting}.`);
}

// Создайте второй файл с именем greetings-utilities_module.ts, а затем добавьте в новый файл следующие две функции: returnGreeting и getLength.
export function returnGreeting2(greeting: string) { // Добавьте export перед функцией returnGreeting2, чтобы она была доступна для других модулей.
  let greetingLength = getLength(greeting);
  console.log(`The message from GreetingsLength_module is ${greeting}. It is ${greetingLength} characters long.`);
}
function getLength(message: string): number {// Нет необходимости экспортировать функцию getLength, поскольку она используется только в области модуля.
  return message.length
}
        /*
+Import a module component
Чтобы использовать экспортированные компоненты из модуля, используйте оператор import. Оператор import может принимать несколько форм в зависимости от целей.
Импорт одного экспорта из модуля: 
  *import { <component name> } from '<module name>'
Чтобы переименовать импорт, используйте следующее ключевое слово:
  *import { <component name> as <new name> } from '<module name>'
Импорт всего модуля в одну переменную и использование его для доступа к экспортам модуля:
  *import * as <variable name> from '<module name>'
+В следующей части упражнения вы импортируете компоненты из каждого из двух модулей в новый модуль.
Создайте новый файл и присвойте ему имя main.ts. Этот файл будет содержать основной код приложения, включая операторы import.
Импортируйте функцию returnGreeting из файла greetings_module.ts, используя ключевое слово import.
*import { returnGreeting } from './greetings_module.js';         // imports a single function in the module
Если greetings_module.ts содержал несколько компонентов, можно импортировать весь модуль в одну переменную (например, allGreetingFunctions), 
как показано в следующем операторе. Затем можно использовать переменную для доступа ко всем экспортам модуля.
*import * as allGreetingFunctions from './greetings_module.js';  // imports all exported components in the module
Попробуйте импортировать функцию returnGreeting из greetings-utilities_module.ts с помощью оператора import { returnGreeting } from './greetings-utilities_module.js'. 
Отобразится ошибка, поскольку оба файла содержат функцию returnGreeting, и теперь имеется конфликт имен в глобальной области main.ts.
Устраните конфликт имен, присвоив второму экземпляру returnGreeting новое имя. Замените { returnGreeting } на { returnGreeting as returnGreetingLength }. 
Теперь можно использовать returnGreetingLength вместо имени функции в коде.
*import { returnGreeting as returnGreetingLength } from './greetings-utilities_module.js';
-!-Если вы хотите запустить полученный код JavaScript в веб-браузере, необходимо добавить расширение JS к имени файла в операторе import.
Теперь можно использовать функции returnGreetings в коде.
+Exercise - Compile modules(Компиляция модулей)
Модули импортируют друг друга с помощью загрузчика модулей. Во время выполнения загрузчик модуля находит и выполняет все зависимости модуля перед его выполнением. 
В зависимости от целевого объекта модуля, указанного во время компиляции, компилятор создаст соответствующий код для Node.js (CommonJS), require.js (AMD), UMD, SystemJS или собственные модули ECMAScript 2015 (ES6).
Чтобы скомпилировать модули, укажите целевой объект --module в командной строке или в файле tsconfig.js для проекта. 
1. Откройте терминал и скомпилируйте модуль main.ts для Node.js, введя следующую команду:
tsc --module commonjs main.ts
2. Компилятор выполняет операторы import для компиляции всех зависимых файлов. Обратите внимание, что при компиляции main.ts каждый модуль будет иметь отдельный файл .js.
3. Введите команду node main, чтобы протестировать файл.
+Выполнение модулей с веб-страницы:
Если вы хотите скомпилировать файл TypeScript для ES6 для использования в веб-браузере, введите следующую команду:
tsc --module es6 main.ts
-!- Чтобы запустить модуль с веб-страницы, не забудьте установить для параметра type значение "module": <script type="module" src=".\main.js"></script>
+Access external type libraries(Доступ к внешним библиотекам типов)
Почти в каждом проекте используются библиотеки сторонних разработчиков. TypeScript позволяет импортировать библиотеки почти так же, как вы импортируете созданные модули. 
Однако в отличие от модулей библиотека JavaScript может не включать определения типов.
+Importing libraries(Импорт библиотек)
В JavaScript для использования внешних библиотек в коде применяется оператор requires. В TypeScript вы получаете доступ к ним с помощью оператора import. 
После импорта библиотеки и ее определения типа библиотеку можно использовать в коде и получить преимущества IntelliSense и проверки типа.
+Type libraries(Библиотеки типов)
Внешние библиотеки типов доступны почти для всех распространенных библиотек, предоставляя эти сведения для библиотек, которые не содержат их (например, написанных на JavaScript). 
Компилятор TypeScript может отобразить сообщение об ошибке при попытке использовать библиотеку, не имеющую определений типов. Также обратите внимание, что технология IntelliSense недоступна, 
если отсутствуют эти определения. Определения типов устанавливаются с префиксом @types.
Поскольку определения типов используются только в TypeScript во время разработки, они необязательно должны быть частью опубликованного проекта. В результате вы можете установить их как devDependencies.
*/