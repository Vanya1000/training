/* 
Процесс - экземмпляр программы во время выполнения, независимый объект, которому выделенны ресурсы ОС (каждый процесс выполняется в отдельном адресном пространстве).
Поток - использует тоже самое пространство памяти, что и процесс, а множество потоков совместно используют данные своих состояний.
  Возможен обмен состояниями между потоками, в общем пространстве памяти в отличие от процессов.

+Child_process - это модуль, который предоставляет возможность создания новых процессов, каждый из которых имеет собственную память. 
  Минусы:
    -Возможна связь только между родительским и дочерним процессом.
    -Создание процесса дорогая операция по ресурсам.
  У модуля есть 3 метода для создания процессов:
    -child_process.exec()
    -child_process.spawn()
    -child_process.fork()
  Метод exec() - создает процесс, который выполняет команду, переданную в качестве аргумента.
    -Возвращает объект ChildProcess, который является событийным эмиттером.
    -Метод exec() является устаревшим, поэтому его использование не рекомендуется.
  Метод spawn() - создает процесс, который выполняет команду, переданную в качестве аргумента.
    -Возвращает объект ChildProcess, который является событийным эмиттером.
    -Метод spawn() является предпочтительным, по сравнению с методом exec().
  Метод fork() - создает процесс, который выполняет файл, переданный в качестве аргумента. 
    -Возвращает объект ChildProcess, который является событийным эмиттером.
    -Метод fork() является предпочтительным, по сравнению с методом exec().
  Exapmle:
  */
  const { exec, spawn, fork } = require('child_process');
  const path = require('path');

  const child = exec('dir', (err, stdout, stderr) => {
    if (err) {
      console.error(`exec error: ${err}`);
      return;
    }
    console.log(`Number of files ${stdout}`);
  });

  const child2 = spawn('dir', (err, stdout, stderr) => {
    if (err) {
      console.error(`exec error: ${err}`);
      return;
    }
    console.log(`Number of files ${stdout}`);
  });

  const child3 = fork(path.join(__dirname, 'child.js'), (err, stdout, stderr) => {
    if (err) {
      console.error(`exec error: ${err}`);
      return;
    }
    console.log(`Number of files ${stdout}`);
  });

  /*

*/