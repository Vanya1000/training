/* 
Процесс - экземмпляр программы во время выполнения, независимый объект, которому выделенны ресурсы ОС (каждый процесс выполняется в отдельном адресном пространстве).
  Доступный пример: На компьютере запущено 2 браузера, каждый из которых является отдельным процессом.
Поток - использует тоже самое пространство памяти, что и процесс, а множество потоков совместно используют данные своих состояний.
  Возможен обмен состояниями между потоками, в общем пространстве памяти в отличие от процессов.
  Доступный пример: На компьютере запущено 2 браузера, каждый из которых является отдельным процессом, но в каждом из них запущено по 2 вкладки, каждая из которых является отдельным потоком.

+Child_process - это модуль, который предоставляет возможность создания новых процессов, каждый из которых имеет собственную память. 
  Минусы:
    -Возможна связь только между родительским и дочерним процессом.
    -Создание процесса дорогая операция по ресурсам.
  У модуля есть 3 метода для создания процессов:
    -child_process.exec()
    -child_process.spawn()
    -child_process.fork()
  Метод exec() - создает процесс, который выполняет команду, переданную в качестве аргумента.
    -Возвращает объект ChildProcess, который является событийным эмиттером.
    -Метод exec() является устаревшим, поэтому его использование не рекомендуется.
  Метод spawn() - создает процесс, который выполняет команду, переданную в качестве аргумента.
    -Возвращает объект ChildProcess, который является событийным эмиттером.
    -Метод spawn() является предпочтительным, по сравнению с методом exec().
  Метод fork() - создает процесс, который выполняет файл, переданный в качестве аргумента. 
    -Возвращает объект ChildProcess, который является событийным эмиттером.
    -Метод fork() является предпочтительным, по сравнению с методом exec().
  Exapmle:
  */
  const { exec, spawn, fork } = require('child_process');
  const path = require('path');

  const child = exec('dir', (err, stdout, stderr) => {
    if (err) {
      console.error(`exec error: ${err}`);
      return;
    }
    console.log(`Number of files ${stdout}`);
  });

  const child2 = spawn('dir', (err, stdout, stderr) => {
    if (err) {
      console.error(`exec error: ${err}`);
      return;
    }
    console.log(`Number of files ${stdout}`);
  });

  const child3 = fork(path.join(__dirname, 'child.js'), (err, stdout, stderr) => {
    if (err) {
      console.error(`exec error: ${err}`);
      return;
    }
    console.log(`Number of files ${stdout}`);
  });

  /*

  Пример Node.js server с использованием модуля child_process:
  */
  const { fork } = require('child_process');  
  const http = require('http');
  const path = require('path');

  const server = http.createServer((req, res) => {
    if (req.url === '/compute') {
      const compute = fork(path.join(__dirname, 'compute.js'));
      compute.send('start');
      compute.on('message', sum => {
        res.end(`Sum is ${sum}`);
      });
    } else {
      res.end('Ok');
    }
  });

  server.listen(3000);
  /* // Основное преимущество модуля child_process в том, что он позволяет создавать дочерние процессы, которые могут выполнять длительные операции, не блокируя основной поток выполнения.
+ Cluster - модуль, который позволяет создавать множество процессов, которые будут выполнять один и тот же код.
Процесс кластеризации представляет собой одну из форм горизонтального масштабирования и позволяет приложениям полноценно использовать все имеющиеся мощности процессора несмотря на однопоточность Node.js.
  Кластеризация - Запуск нескольких экземпляров одного приложения для распределения между ними обработки поступающих запросов.
  Для получения максимальной производительности количество запущенных экземпляров не должно превышать количество ядер процессора.
  Работает на основе запуска процессов, которые будут обрабатывать запросы. Node.js будет запускать теже child_process, но с помощью модуля cluster.
  Дополнительные (дочерние) экземпляры создаются основным процессом, являются независимыми самостоятельными серверами и привязываются к тому же порту, где запущен основной процесс. 
    Совокупность основного и дочерних экземпляров называется кластером.


  Master process - процесс, который запускает дочерние процессы.
  Worker process - процесс, который выполняет код приложения.
  Пример Node.js server с использованием модуля cluster:
  */
  const cluster = require('cluster');
  const http = require('http');
  const numCPUs = require('os').cpus().length;
  
  if (cluster.isMaster) {
    console.log(`Master ${process.pid} is running`);

    // Fork workers.
    for (let i = 0; i < numCPUs; i++) {
      cluster.fork();
    }

    cluster.on('exit', (worker, code, signal) => {
      console.log(`worker ${worker.process.pid} died`);
    });
  } else {
    // Workers can share any TCP connection
    // In this case it is an HTTP server
    http.createServer((req, res) => {
      res.writeHead(200);
      res.end('hello world');
    }).listen(8000);

    console.log(`Worker ${process.pid} started`);
  }
  /*








*/