/* 
NodeJs - это  программная платформа, основанная на движке V8, 
  Превращает JavaScript в программный код, который может выполняться вне браузера.
  Добавляет в JavaScript возможность работы с файловой системой, сетью, вводом-выводом через API написанный на C++.
Преимущества NodeJs:
  -Простота. Легко начать зная JavaScript, но трудно глубоко понять. 
  -Скорость за счет не блокирующего ввода-вывода.
  - 1 язык на клиенте и на сервере.
  - Богатый менеджмент пакетов.
Основные блоки:
  - v8 - Задача преобразования JavaScript в программный код выполняется движком V8, который написан на C++.
  - libuv: 
    - Кроссплатформенная библиотека, которая предоставляет асинхронный ввод-вывод, сетевые возможности, таймеры и многое другое.
        На разных платформах libuv использует разные механизмы работы с файловой системой, сетью, таймерами и т.д.
        Мы через команды даем команды libuv, а он уже сам решает как именно работать с файловой системой, сетью, таймерами и т.д.
        Эта библиотека знает как работать с разными платформами.
    - Цикл событий (event loop) - основной компонент libuv, который позволяет Node.js выполнять асинхронные операции.
Асинхронная модель vs синхронная модель:
  -В таких языках как С, Java, Pyton все инструкции являются блокирующими, то есть выполняются последовательно(по умолчанию).
    Чтение файла, запись в файл, отправка запроса в сеть, все это блокирует выполнение программы. 
    И для того чтобы это предотвратить используется многопоточное программирование. Управление потоками(thread).
    Это достаточно сложная тема. И требует компетенций в этой области.
    Преимущества:
      - Скорость сложных вычислений.
      - Параллелизм.
    Недостатки:
      - Простаивание потоков большую часть времени. А ресурсы занимает.
  -В nodejs вместо того что бы заблокировать выполнение программы, мы используем цикл событий.
    Программа продолжит выполняться, а вместо того что бы ждать ответа от сервера, мы просто передаем ему функцию обратного вызова(callback).
    Преимущества:
      -Меньше потоков, меньше потребление памяти.
      -Скорость обработки запросов(если они простые). Таких скоростей нельзя достичь с помощью многопоточности.
    Минусы:
      -Если запросы сложные, то скорость обработки будет низкой.
      -Много асинхронного кода, сложно читать.
      -Обратиться к БД, обработать сетевой запрос - это все будет работать очень быстро, а провести анализ данных, сделать сложные вычисления - это будет работать очень медленно.
Event loop:
  Сам по себе JS является однопоточным, но внутри него используется цикл событий(event loop). Что позволяет выполнять асинхронные операции.
  Сам по себе nodejs является однопоточным, но в основе  nodeJS лежит Libuv, которая занимается операциями ввода-вывода. 
    В своей основе Libuv может управлять потоками(по умолчанию 4 потока). Но для нас это не важно, потому что мы не будем работать с потоками напряму.
  nodeJS однопоточный, но при этом Libuv использует потоки. Libuv написан на С, а движок V8 написан на С++. И на С и на С++ можно писать модули для nodeJS. 
    Это говорит о том что некоторые библиотеки могут использовать потоки. Например модуль crypto, который используется для шифрования.
    Например запустив 4 функции шифрования, они выполняться будут параллельно, и выполнятьбся примерно одновременно, 
    а если запустить 5 функций шифрования, то 4 из них будут выполняться параллельно, а 5-я будет ждать пока освободится поток.
  В итоге! nodeJS однопоточный, но при этом Libuv использует потоки. Но с версии 11.7.0 nodeJS стал многопоточным. worker_threads.

  Неблокирующий ввод/вывод стал возможным благодаря современным операционным системам, которые предоставляют данный механизм — демультиплексор событий.
  Демультиплексор событий — это механизм, который принимает от приложения запрос, регистрирует его и выполняет.
    1. У нас есть приложение и в нём выполняются операции (пусть это будет чтение файла).
    2. Для этого делается запрос в демультиплексор событий, сюда отправляется ресурс (ссылка на файл), нужная операция и callback.
    3. Демультиплексор событий регистрирует этот запрос и возвращает управление непосредственно приложению — таким образом, оно не блокируется.
    4. Затем он выполняет операции над файлом, и после этого, когда файл будет прочитан, callback регистрируется в очереди на выполнение.
    5. Затем Event Loop постепенно синхронно обрабатывает каждый callback из этой очереди. И, соответственно, возвращает результат приложению.
    Таким образом, благодаря данному неблокирующему вводу/выводу Node.js может быть асинхронным.
    В данном случае неблокирующий ввод/вывод предоставляет нам именно операционная система. 
    К неблокирующему вводу/выводу (вообще в принципе к операциям ввода/вывода) мы относим сетевые запросы и работу с файлами.
*/